@startuml

package "net/rpc/client.go" #DDDDDD {
    class rpc {
        type Call struct // Call 代表一个活跃的 RPC
        type Client struct
        type ClientCodec interface
        type gobClientCodec struct
        + NewClient(conn io.ReadWriteCloser) *Client
        + NewClientWithCodec(codec ClientCodec) *Client
        + DialHTTP(network, address string) (*Client, error)
        + DialHTTPPath(network, address, path string) (*Client, error)
        + Dial(network, address string) (*Client, error)
    }

    class client {
        codec ClientCodec
        reqMutex sync.Mutex // 请求锁保护 request
        request  Request
        mutex    sync.Mutex // 保护 seq
        seq      uint64
        pending  map[uint64]*Call // 等待中的 rpc
        closing  bool // 用户已调用 Close
        shutdown bool // 服务器已告知停止
        + send(call *Call)
        + input()
        + Close() error
        + Go(serviceMethod string, args interface{}, reply interface{}, done chan *Call) *Call
        + Call(serviceMethod string, args interface{}, reply interface{}) error
    }

    class gobClientCodec {
        rwc    io.ReadWriteCloser
    	dec    *gob.Decoder
    	enc    *gob.Encoder
    	encBuf *bufio.Writer
    	closed bool
        + ReadRequestHeader(r *Request) error
        + ReadRequestBody(body interface{}) error
        + WriteResponse(r *Response, body interface{}) (err error)
        + Close() error
    }

    gobClientCodec -down-> client: 服务端与客户端定义相同的编解码器来进行 requests 和 responses 的序列化工作
    client -up-> rpc: server.go.rpc 的导出函数基本调用 DefaultServer 的函数
}

@enduml
